{"version":3,"sources":["Firebase.js","Todo.js","TodoForm.js","App.js","reportWebVitals.js","login.js","index.js"],"names":["db","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","getFirestore","delete1","e","a","console","log","target","id","deleteDoc","doc","toString","updatepass","result","pass","str","i","char","Math","floor","random","length","charAt","generateP","cityRef","setDoc","password","merge","Todo","todo","doc1","index","markComplete","className","name","onClick","Todos","todos","React","useState","todo1","settodo1","user","localStorage","getItem","useEffect","q","query","collection","where","unsubscribe","onSnapshot","querySnapshot","cities","forEach","push","data","join","map","key","TodoForm","addTodo","value","setvalue","onSubmit","preventDefault","type","placeholder","onChange","App","isCompleted","state","setState","addDoc","email","newState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","login","auth","getAuth","provider","GoogleAuthProvider","signInWithPopup","credentialFromResult","accessToken","setItem","displayName","window","location","reload","catch","error","code","errorMessage","message","credentialFromError","alert","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.369434de.chunk.js","sourcesContent":["import { initializeApp } from 'firebase/app';\nimport { getFirestore } from \"firebase/firestore\"\n\nconst firebaseConfig = {\n\n  apiKey: \"AIzaSyAJTihH8JkI-znX0vaytX7CdYR8u6JNEMQ\",\n\n  authDomain: \"uber-eats-clone-eaa56.firebaseapp.com\",\n\n  databaseURL: \"https://uber-eats-clone-eaa56-default-rtdb.firebaseio.com\",\n\n  projectId: \"uber-eats-clone-eaa56\",\n\n  storageBucket: \"uber-eats-clone-eaa56.appspot.com\",\n\n  messagingSenderId: \"958443395901\",\n\n  appId: \"1:958443395901:web:f07248095ca24e32a38354\"\n\n};\n\n\nconst firebaseApp=initializeApp(firebaseConfig);\nconst db=getFirestore();\nexport default db;","/* eslint-disable react-hooks/exhaustive-deps */\nimport React from 'react';\nimport db from './Firebase';\nimport { collection,  query , onSnapshot, deleteDoc, doc, setDoc , where} from \"firebase/firestore\"; \nimport {AiOutlineDelete , AiOutlineReload} from 'react-icons/ai';\nimport './App.css'\nconst Todos = ({todos,markComplete}) => {\n     const [todo1, settodo1] = React.useState([])\n     let user = localStorage.getItem('user') || '';\n    React.useEffect( async () => {\n        const q = query(collection(db, \"password-saver\"),where(\"email\", \"==\", user));\n        const unsubscribe = onSnapshot(q, (querySnapshot) => {\n            const cities = [];\n            querySnapshot.forEach((doc) => {\n                cities.push([doc.data(), doc.id]);\n                console.log(doc.data());\n            });\n            settodo1(cities);\n            console.log(\"Current cities in CA: \", cities.join(\", \"));\n          });\n          return () => unsubscribe();\n    }, [todos]);\n    console.log(todo1,\"ðŸ¥®ðŸ¥®ðŸ¥®ðŸ¥®\")\n    return (\n        <div className=\"todo-list\">\n                {\n                   \n\n                    todo1.map((todo, index) => (\n                        \n                        <Todo todo={todo[0]} key={index} index={index} markComplete={markComplete} doc1 = {todo[1]} />\n                        \n                    ))\n                }\n        </div>\n    );\n};\nconst delete1 = async(e) =>{\n    console.log(e.target.id)\n    await deleteDoc(doc(db, \"password-saver\", e.target.id.toString()));\n}\nfunction generateP() { \n    var pass = ''; \n    var str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +  'abcdefghijklmnopqrstuvwxyz0123456789@#$'; \n     var i = 0; \n    for ( i = 1; i <= 8; i++) { \n        var char = Math.floor(Math.random() \n                    * str.length + 1); \n          \n        pass += str.charAt(char) \n    } \n      \n    return pass; \n  }\nconst updatepass = (e) =>{\n    let result = generateP();\n    console.log(result);\n    const cityRef = doc(db, 'password-saver', e.target.id.toString());\n    setDoc(cityRef, { password: result }, { merge: true })\n\n}\nconst Todo = ({todo, index,markComplete, doc1}) =>(\n    <div className=\"todo\">\n        {/*<p style={{textDecoration : todo.isCompleted ? \"line-through\" : \"\"}} >\n            <input type={\"checkbox\"} onChange={() => markComplete(index)}  name={\"completed\"} id={todo.id} />{' '}*/}\n            {todo.name} {'Password is :-'} {todo.password}\n        <AiOutlineDelete onClick={delete1} id = {doc1} />\n        <AiOutlineReload onClick={updatepass} id={doc1}/>\n    </div>\n);\n\nexport default Todos;","import React, {useState} from 'react'\n\nconst TodoForm = ({addTodo}) =>{\n    const [value, setvalue] = useState('');\n\n    const handleChange = (e) => {   //to handle change in form input (when user is typing)\n        setvalue(e.target.value);         //e.target gives the value of current value the user is typing\n    };\n\n    const handleAdd = (e) => {\n        e.preventDefault();     //to prevent DOM from reloading the page\n        if (!value)             //if user submits empty form, do nothing\n            return;\n        addTodo(value);\n        setvalue('');           //set the value to be empty again to get ready for next input\n    };\n    \n    return(\n        <div className={\"container\"}>\n            <div className=\"App\">Passowrd Creator</div>\n            <form  className=\"App\"  onSubmit={handleAdd}>\n                <input   className={\"form-control col-md-8 \"} type={\"textarea\"} placeholder={\"Add a ToDo\"} value={value} onChange={handleChange}/>\n                <input className={\"form-control btn-primary col-md-4 submit-button\"} type={\"submit\"} value={\"Add\"}/>\n            </form>\n        </div>\n    )\n};\n\nexport default TodoForm;","import './App.css';\nimport React,{useState} from 'react';\nimport Todos from './Todo';\nimport TodoForm from './TodoForm';\nimport db from './Firebase';\nimport { collection, addDoc } from \"firebase/firestore\"; \nfunction App()\n{\n  const [state,setState] = useState([{\n    id:1,\n    name : \"Wake Up bud\",\n    password : \"Check password\",\n    isCompleted : false , \n  },\n{\n  id : 2,\n  name : \" brush both teeth and brain\",\n  password : \"Test examples \",\n  isCompleted : false,\n},]);\n\n function generateP() { \n  var pass = ''; \n  var str = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' +  'abcdefghijklmnopqrstuvwxyz0123456789@#$'; \n   var i = 0; \n  for ( i = 1; i <= 8; i++) { \n      var char = Math.floor(Math.random() \n                  * str.length + 1); \n        \n      pass += str.charAt(char) \n  } \n    \n  return pass; \n}\nconst addTodo = (todo) =>\n{\n  const pass = generateP();\n  let user = localStorage.getItem('user') || '';\n  setState([...state,{name : todo,password : pass}]);\n  //const addpassRef = doc(db, \"password-saver\", \"users1\")\n  //const addpass =  setDoc(addpassRef, {name : todo,password : pass},{merge : true});\n  const addp = addDoc(collection(db,\"password-saver\"),{name : todo,password : pass,email : user });\n  console.log({state});\n  \n}\nconst markComplete = (index) => {\n  const newState = [...state];\n  newState[index].isCompleted = !newState[index].isCompleted;\n  setState(newState);\n}\nreturn (\n  <div className=\"parent-container\">\n      <div className=\"container top-container\">\n          <div className=\"App-header\">\n              <div className=\"todoform\">\n                  <TodoForm addTodo={addTodo} />\n                  <Todos todos={state}  markComplete={markComplete} />\n              </div>\n          </div>\n      </div>\n  </div>\n);\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React,{useState} from 'react';\nimport { getAuth, signInWithPopup, GoogleAuthProvider } from \"firebase/auth\";\n\nfunction login() {\n  const auth = getAuth();\n  const provider = new GoogleAuthProvider();\n  //const [auth1, setauth1] = useState(\"\")\n  const signIn = () => {\n    signInWithPopup(auth, provider)\n      .then((result) => {\n        // This gives you a Google Access Token. You can use it to access the Google API.\n        const credential = GoogleAuthProvider.credentialFromResult(result);\n        const token = credential.accessToken;\n        // The signed-in user info.\n        const user = result.user;\n        console.log(user);\n        //setauth1(user.displayName);\n        localStorage.setItem(\"user\", user.email);\n        localStorage.setItem(\"username\", user.displayName);\n       // alert(`Welcome ${user.displayName}`);\n        window.location.reload();\n        // ...\n      }).catch((error) => {\n        // Handle Errors here.\n        const errorCode = error.code;\n        const errorMessage = error.message;\n        // The email of the user's account used.\n        const email = error.email;\n        // The AuthCredential type that was used.\n        const credential = GoogleAuthProvider.credentialFromError(error);\n        alert(errorMessage);\n        // ...\n      });\n    }\n  return (\n    <button onClick={signIn}>signin</button>\n  )\n}\n\nexport default login","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Login from './login';\n//console.log(user)\nlet user = localStorage.getItem('user')\nReactDOM.render(\n    user ? <App/> : <Login />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}